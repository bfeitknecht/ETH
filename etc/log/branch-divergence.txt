## directory structure on nas: "bfeitknecht@slab1.ethz.ch"
homepage/
    ...
    dev/
        every-day.sh
        every-day.html

^^^^^^^^^^^^^^^^^^^^^^^^^^^^: gets modified every day, needs to be pushed to remote every day



## directory structure in remote: "origin" on branch: "master"
~/
    ...
    homepage/
        ...
        dev/
            every-day.sh
            every-day.html




I have the above folder structure on my nas that hosts the website and my remote repository respectively.
i have a crontab that executes the every-day.sh script every dayand edits the every-day.html file.
i want to commit these changes to the remote reposiotory. the problem is, that dev is a subdirectory of homepage.
i want to sync my changes from local (nas) to remote (github) but i want them to be in the subdirectory dev inside homepage,
where they belong. i absolutely do not want to lose all my commits on the remote. i don't even really want to pull from remote,
unless absolutely necessary. how can i solve this problem?





options:
- use a different branch to do daily commit, all activity  on branch: "dev"
- figure out a way to push from nas to remote without having to pull
    - pull and do a clean up?
- use git subtree (see below)

Here is a visual representation of how the git subtree command works:

Original Repository
└── homepage/
    ├── ...
    └── dev/
        ├── every-day.sh
        └── every-day.html

Split Repository
├── every-day.sh
└── every-day.html

In this example, we have a directory called homepage/dev in the original repository that we want to split into a separate repository.
We can use the git subtree split command to split the homepage/dev directory into a new branch, and then use the git push command
to push the new branch to a new repository.

Here are the steps to split the homepage/dev directory into a separate repository using the git subtree command:


1. Create a new branch in the original repository to hold the changes you want to split.
    git checkout -b dev-split

2. Use the git subtree split command to split the homepage/dev directory into a new branch.
    git subtree split --prefix=homepage/dev -b dev-split
This will create a new branch called dev-split that contains only the changes in the homepage/dev directory.

3. Create a new repository on a Git hosting service, such as GitHub or GitLab.

4. Add the new repository as a new remote in the original repository.
    git remote add new-remote new-repository-url
Replace new-remote with a name for the new remote repository, and new-repository-url with the URL of the new repository.

5. Push the dev-split branch to the new repository using the git push command.
    git push new-remote dev-split:master
This will push the dev-split branch to the master branch of the new repository.


Once the homepage/dev directory has been split into a separate repository, you can work with it as if it were a separate repository.
You can make changes to the files in the homepage/dev directory, commit the changes, and push the changes to the new repository
using the standard Git commands.

To merge changes from the new repository back into the original repository, you can use the git subtree merge command.
This command allows you to merge changes from a subtree of a repository into the main repository,
while preserving the history of the subtree.

Here are the steps to merge changes from the new repository back into the original repository using the git subtree command:


1. Add the new repository as a new remote in the original repository.
    git remote add new-remote new-repository-url
Replace new-remote with a name for the new remote repository, and new-repository-url with the URL of the new repository.

2. Fetch the latest changes from the new repository using the git fetch command.
    git fetch new-remote

3. Use the git subtree merge command to merge changes from the dev directory in the new repository into the homepage/dev directory
in the original repository.
    git subtree merge --prefix=homepage/dev new-remote/master
This will merge the changes from the dev directory in the new repository into the homepage/dev directory in the original repository,
while preserving the history of the dev directory.


Note that using the git subtree command can be complex and risky, as it can result in unexpected changes to the repository.
It is generally recommended to review the changes carefully before using git subtree, and to test the modified code thoroughly
to ensure that it works as expected.







